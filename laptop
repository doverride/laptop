#!/bin/bash

shopt -o -s nounset

declare CONFIG="laptop.conf"
declare SECILC="/usr/bin/secilc"

declare VERSION="$(/bin/cat /sys/fs/selinux/policyvers)"
declare POLICYVERS="$(/bin/cat /sys/fs/selinux/policyvers)"

declare DISABLE_DONTAUDIT="0"
declare ALLOW_UNKNOWN="0"
declare VERBOSE="0"

declare INSTALL="0"

declare EXCL="EXCLUDE"
declare EXCL_LOCAL="EXCLUDE.local"

declare HOME="/home"
declare SHELL="/bin/bash"

declare SEUSERS="seusers"
declare SEUSERS_LOCAL="seusers.local"

unset MODULES
declare -a MODULES+=$(/bin/find . -type f \( -iname "*.cil" \) | /bin/cut -d/ -f2-)

if [ -r "${PWD}/${CONFIG}" -a -s "${PWD}/${CONFIG}" ] ; then
    source "${PWD}/${CONFIG}" 2>/dev/null
fi

do_compile_context () {
    # Why is this in sbin?
    if [ -x /sbin/sefcontext_compile ] ; then
        /sbin/sefcontext_compile "${PWD}/contexts/files/file_contexts" && /sbin/sefcontext_compile "${PWD}/contexts/files/file_contexts.homedirs" || return 192
    fi
}

do_default () {
    get_secilc || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    if [ -z "${POLICYVERS}" ] ; then
        echo "Unable to determine MAX_POLICYDB_VERSION!"
        return 192
    fi

    ${SECILC} ${MODULES[@]} -o policy/policy.${POLICYVERS} -f contexts/files/file_contexts || return 192

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
}

do_install () {
    if  ! [[ -d /etc/selinux ]] || ! [[ -d /etc/selinux/laptop ]] ; then
        /bin/sudo /bin/mkdir -p /etc/selinux/laptop && \
        /bin/sudo /bin/mkdir -m 0700 /etc/selinux/laptop/policy && \
        /bin/sudo /bin/cp -r ${PWD}/contexts /etc/selinux/laptop/ && \
        /bin/sudo /bin/cp -r ${PWD}/contexts/files /etc/selinux/laptop/contexts/ && \
        /bin/sudo /bin/cp -r ${PWD}/contexts/users /etc/selinux/laptop/contexts/ && \
        /bin/sudo /bin/cp -r ${PWD}/policy/policy* /etc/selinux/laptop/policy/ || exit 192

        if [ -e "${PWD}/seusers.local" -a -s "${PWD}/seusers.local" ] ; then
            /bin/sudo /bin/cp ${PWD}/seusers.local /etc/selinux/laptop/seusers || exit 192
        else
            /bin/sudo /bin/cp ${PWD}/seusers /etc/selinux/laptop/ || exit 192
        fi

        echo "New install: Change "SELINUXTYPE" in /etc/selinux/config to new "laptop" policy model first!"
        echo "New install: Be sure to load_policy and restorecon -R -v -F / in *PERMISSIVE MODE*!"

        echo "Example:"
        echo "/bin/sudo /sbin/setenforce 0"
        echo "/bin/sudo /sbin/load_policy"
        echo "/bin/sudo /sbin/restorecon -R -v -F /"
        echo "reboot"

    elif [ -d /etc/selinux/laptop ] ; then
        /bin/sudo \cp -rf ${PWD}/contexts /etc/selinux/laptop/ && \
        /bin/sudo \cp -rf ${PWD}/contexts/files /etc/selinux/laptop/contexts/ && \
        /bin/sudo \cp -rf ${PWD}/contexts/users /etc/selinux/laptop/contexts/ && \
        /bin/sudo \cp -rf ${PWD}/policy/ /etc/selinux/laptop/ || exit 192

        /bin/sudo /bin/chmod 0700 /etc/selinux/laptop/policy || exit 192

        if [ -e "${PWD}/seusers.local" -a -s "${PWD}/seusers.local" ] ; then
            if [ -f /etc/selinux/laptop/seusers ] ; then
                /bin/sudo /bin/rm -f /etc/selinux/laptop/seusers || exit 192
            fi

            /bin/sudo \cp -f ${PWD}/seusers.local /etc/selinux/laptop/seusers || exit 192
        else
            if [ -f /etc/selinux/laptop/seusers.local ] ; then
                /bin/sudo /bin/rm -f /etc/selinux/laptop/seusers.local || exit 192
            fi

            /bin/sudo \cp -f ${PWD}/seusers /etc/selinux/laptop/ || exit 192
        fi

        if [[ "$(/bin/grep ^SELINUXTYPE /etc/selinux/config | /bin/awk -F "=" '{ print $2 }')" == "laptop" ]] ; then
            echo "Update: Run /sbin/load_policy to apply changes!"
            echo "Update: File contexts changes may require that you relabel and/or restart affected files and/or processes respectively!"
        else
            echo "Policy change: Change "SELINUXTYPE" in /etc/selinux/config to new "laptop" policy model first!"
            echo "Policy change: Be sure to load_policy and restorecon -R -v -F / in *PERMISSIVE MODE*!"

            echo "Example:"
            echo "/bin/sudo /sbin/setenforce 0"
            echo "/bin/sudo /sbin/load_policy"
            echo "/bin/sudo /sbin/restorecon -R -v -F /"
            echo "reboot"
        fi
    fi
}

do_tests () {
    source tests/modular/functions
    modular_run_tests
}

gen_contexts () {
    get_real_users || exit $(echo $?)
    gen_contexts_template || exit $(echo $?)

    if [ -e "${PWD}/${SEUSERS_LOCAL}" -a -s "${PWD}/${SEUSERS_LOCAL}" ] ; then
        myseusers="${PWD}/${SEUSERS_LOCAL}"
    else
        myseusers="${PWD}/${SEUSERS}"
    fi

    echo > "${PWD}/contexts/files/file_contexts.homedirs"

    local DEFSEUSER=$(/bin/grep ^__default__ "${myseusers}" | /bin/awk -F ":" '{ print $2 }')

    echo "$HOME(/.*)? $DEFSEUSER:object_r:home_dir_t" >> "${PWD}/contexts/files/file_contexts.homedirs"
    echo "$HOME/.*/.* $DEFSEUSER:object_r:user_home_t" >> "${PWD}/contexts/files/file_contexts.homedirs"

    for realuser in ${REALUSERS[*]} ; do
        if [ $(/bin/grep "^${realuser}:" "${myseusers}") ] ; then
            local IFS=$'\n'

            unset REALSEUSER
            local REALSEUSER=$(/bin/grep "^${realuser}:" "${myseusers}" | /bin/awk -F ":" '{ print $2 }')

            for homedir_context in ${HOMEDIR_TEMPLATE[*]} ; do
                unset stepone
                local stepone=$(echo "${homedir_context//HOME_DIR/$HOME/$realuser}")
                echo "${stepone//system_u/$REALSEUSER}" >> "${PWD}/contexts/files/file_contexts.homedirs"
            done

            for usermailspool_context in ${USERMAILSPOOL_TEMPLATE[*]} ; do
                unset stepone
                local stepone=$(echo "${usermailspool_context//USER_MAIL_SPOOL//var/spool/mail/$realuser}")
                echo "${stepone//system_u/$REALSEUSER}" >> "${PWD}/contexts/files/file_contexts.homedirs"
            done

        else
            local IFS=$'\n'

            for homedir_context in ${HOMEDIR_TEMPLATE[*]} ; do
                unset stepone
                local stepone=$(echo "${homedir_context//HOME_DIR/$HOME/$realuser}")
                echo "${stepone//system_u/$DEFSEUSER}" >> "${PWD}/contexts/files/file_contexts.homedirs"
            done

            for usermailspool_context in ${USERMAILSPOOL_TEMPLATE[*]} ; do
                unset stepone
                local stepone=$(echo "${usermailspool_context//USER_MAIL_SPOOL//var/spool/mail/$realuser}")
                echo "${stepone//system_u/$DEFSEUSER}" >> "${PWD}/contexts/files/file_contexts.homedirs"
            done
        fi
    done
}

gen_contexts_template () {
    if [ -r ${PWD}/contexts/files/file_contexts ] ; then
        local IFS=$'\n'

        unset HOMEDIR_TEMPLATE
        HOMEDIR_TEMPLATE+=($(/bin/grep HOME_DIR contexts/files/file_contexts))

        unset USERMAILSPOOL_TEMPLATE
        USERMAILSPOOL_TEMPLATE+=($(/bin/grep USER_MAIL_SPOOL contexts/files/file_contexts))
    else
        return 192
    fi

    if [[ -z ${HOMEDIR_TEMPLATE[*]} ]] ; then
        echo "No home directory template to process!"
        return 192
    else
        /bin/sed -i.bak '/HOME_DIR/d' contexts/files/file_contexts 2>/dev/null || return 192
    fi

    if [[ -z ${USERMAILSPOOL_TEMPLATE[*]} ]] ; then
        echo "No user mail spool template to process!"
        return 192
    else
        /bin/sed -i.bak '/USER_MAIL_SPOOL/d' contexts/files/file_contexts 2>/dev/null || return 192
    fi
}

gen_listing () {
    get_ignore

    for i in ${IGNORE[*]} ; do
        MODULES=$(printf "%s\n" "${MODULES[*]}" | /bin/grep -v $i)
    done

    for m in ${MODULES[@]} ; do
        if [ ! -s $m ] ; then
            echo "Not processing empty file: $m"
            MODULES=$(printf "%s\n" "${MODULES[*]}" | /bin/grep -v ${m}$)
        fi
    done

    if [ -z "${MODULES}" ] ; then
        echo "No modules to list!"
        return 192
    else
        printf "%s\n" "${MODULES[*]}" | /bin/sort > LISTING
    fi
}

get_help () {
    echo "
    laptop - A crappy bash script to wrap around the SELinux CIL compiler.

    Local configuration:
        If wish to specify an alternate location for your SELinux CIL compiler or if you wish to specify an alternate policy version then
        you can do so in an "laptop.conf" file.

        Example:

        declare SECILC="/my/alternate/location/secilc"
        declare VERSION="21"

    Local modules:
        If you wish to maintain local modules then you can store those in the "sources.d" drop-in directory.
        Make sure to use the ".cil" suffix with your modules.

        Example:

        sources.d/mymodule.cil

    Local excludes:
        If you wish to exclude modules then you can store relative paths of these modules in an "EXCLUDE.local" file.

        Example:

        sources/modules/contrib/applications/b43fwcutter.cil
        sources/modules/contrib/services/bluetooth.cil

    Local seusers:
        If you wish to use your own "seusers" configuration for the creation of home directory contexts then you can do so in an "seusers.local" file.

    Options:
        -d | --disable-dontaudit    Build policy without "dontaudit" av rules inserted.
        -h | --help                 Show this help. (exclusive option)
        -i | --install              Install the compiled policy and configuration.
        -l | --listing              Generate a LISTING file with the modules configured to compile. (exclusive option)
        -t | --test                 Run all available tests. (exclusive option)
        -u | --allow-unknown        Build policy that will allow unknown access vectors.
        -v | --verbose              Build policy in verbose mode.

    Exclusive options can not be combined with other options. Only the first of the specified exclusive options will be executed.

    Running this script with no options will build the policy silently with "dontaudit" av rules, and with defaults as specified in "sources/config.cil".
    "
}

get_modules () {
    for i in ${IGNORE[*]} ; do
        MODULES=$(printf "%s\n" "${MODULES[*]}" | /bin/grep -v $i)
    done

    for m in ${MODULES[@]} ; do
        if [ ! -s $m ] ; then
            echo "Not processing empty file: $m"
            MODULES=$(printf "%s\n" "${MODULES[*]}" | /bin/grep -v ${m}$)
        fi
    done

    if [ -z "${MODULES}" ] ; then
        echo "No modules to compile!"
        return 192
    fi
}

get_real_users () {
    test -r /etc/login.defs || return 192
    test -x /bin/getent || return 192

    local UIDMIN=$(/bin/grep ^UID_MIN /etc/login.defs | /bin/awk -F " " '{ print $2 }')
    local UIDMAX=$(/bin/grep ^UID_MAX /etc/login.defs | /bin/awk -F " " '{ print $2 }')

    if [[ -z ${UIDMIN} ]] || ! [[ "${UIDMIN}" =~ ^[0-9]+$ ]] && [[ -z ${UIDMAX} ]] || ! [[ "${UIDMAX}" =~ ^[0-9]+$ ]] ; then
        return 192
    fi

    local -a ENT=$(/bin/getent passwd)

    local IFS=$'\n'

    for myuser in ${ENT[@]} ; do
        local myuserid=$(echo "${myuser}" | /bin/awk -F ":" '{ print $3 }')

        if ! [[ "${myuserid}" -lt "${UIDMIN}" ]] && ! [[ "${myuserid}" -gt "${UIDMAX}" ]] ; then
            local myusername=$(echo "${myuser}" | /bin/awk -F ":" '{ print $1 }')
            local myuserhome=$(echo "${myuser}" | /bin/awk -F ":" '{ print $6 }')
            local myusershell=$(echo "${myuser}" | /bin/awk -F ":" '{ print $7 }')

            if [[ "${myuserhome}" == "${HOME}/${myusername}" ]] && [[ "${myusershell}" == "${SHELL}" ]] ; then
                REALUSERS+=$(echo "${myusername} ")
            fi
        fi
    done

    if [[ -z ${REALUSERS[*]} ]] ; then
        echo "No users to process!"
        return 192
    fi
}

get_secilc () {
    if [ ! -x "${SECILC}" ] ; then
        SECILC="/usr/bin/secilc"
    fi

    if [ ! -x "${SECILC}" ] ; then
        echo "SELinux CIL compiler at ${SECILC} cannot be executed!"
        return 192
    fi
}

get_version () {
    if [ -z "${POLICYVERS}" ] ; then
        echo "Unable to determine MAX_POLICYDB_VERSION!"
        return 192
    fi

    if [[ -z ${VERSION} ]] || ! [[ "${VERSION}" =~ ^[0-9]+$ ]] || [[ "${VERSION}" -gt ${POLICYVERS} ]] ; then
        echo "Specified policy version (${VERSION}) is greater than MAX_POLICYDB_VERSION (${POLICYVERS}). Defaulting to ${POLICYVERS}!"
        VERSION="$(/bin/cat /sys/fs/selinux/policyvers)"
    fi
}

get_ignore () {
    unset IGNORE

    if [ -e "${PWD}/${EXCL_LOCAL}" -a -s "${PWD}/${EXCL_LOCAL}" ] ; then
        IGNORE+=($(/bin/cat "${PWD}/${EXCL}"))
        IGNORE+=($(/bin/cat "${PWD}/${EXCL_LOCAL}"))
    else
        IGNORE+=($(/bin/cat "${PWD}/${EXCL}"))
    fi
}

if [ $# -eq 0 ] ; then
    do_default || exit $(echo $?)
fi

while (($# > 0)) ; do
    case $1 in
        -h|--help)
            get_help
            exit $(echo $?)
            ;;
        -d|--disable-dontaudit)
            DISABLE_DONTAUDIT=1
            ;;
        -i|--install)
            INSTALL=1
            ;;
        -l|--listing)
            gen_listing
            exit $(echo $?)
            ;;
        -t|--test)
            do_tests
            exit $(echo $?)
            ;;
        -u|--allow-unknown)
            ALLOW_UNKNOWN=1
            ;;
        -v|--verbose)
            VERBOSE=1
            ;;
        -*)
            echo "switch ${1} not supported"
            break
            ;;
        *)
            echo "extra argument or missing switch"
            break
            ;;
    esac
    shift
done

if [ "{$DISABLE_DONTAUDIT}" == 0 -a "${ALLOW_UNKNOWN}" == 0 -a "${VERBOSE}" == 0 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" --handle-unknown=deny ${MODULES[@]}\
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 1 -a "${ALLOW_UNKNOWN}" == 0 -a "${VERBOSE}" == 0 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -D --handle-unknow=deny ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 0 -a "${ALLOW_UNKNOWN}" == 1 -a "${VERBOSE}" == 0 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" --handle-unknow=allow ${MODULES[@]}\
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 0 -a "${ALLOW_UNKNOWN}" == 0 -a "${VERBOSE}" == 1 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -v --handle-unknow=deny ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 1 -a "${ALLOW_UNKNOWN}" == 1 -a "${VERBOSE}" == 0 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -D --handle-unknow=allow ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 0 -a "${ALLOW_UNKNOWN}" == 1 -a "${VERBOSE}" == 1 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -v --handle-unknow=allow ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 1 -a "${ALLOW_UNKNOWN}" == 0 -a "${VERBOSE}" == 1 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -v -D --handle-unknown=deny ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

if [ "${DISABLE_DONTAUDIT}" == 1 -a "${ALLOW_UNKNOWN}" == 1 -a "${VERBOSE}" == 1 ] ; then
    get_secilc || exit $(echo $?)
    get_version || exit $(echo $?)
    get_ignore || exit $(echo $?)
    get_modules || exit $(echo $?)

    ${SECILC} --policyvers="${VERSION}" -v -D --handle-unknown=allow ${MODULES[@]} \
        -o policy/policy.${VERSION} -f contexts/files/file_contexts || exit $(echo $?)

    gen_contexts || exit $(echo $?)
    do_compile_context || exit $(echo $?)

    if [ "${INSTALL}" == 1 ] ; then
        do_install || exit $(echo $?)
    fi
fi

exit $(echo $?)

#EOF
